version: '3.5'

networks:
  external_network:
    name: queerhaus_external
    external: true
  internal_network:
    name: queerhaus_internal
    internal: true
    external: true

# https://github.com/matrix-org/synapse/blob/develop/contrib/docker/docker-compose.yml
services:

  synapse-app:
    image: docker.io/matrixdotorg/synapse:v1.26.0
    restart: unless-stopped
    environment:
      - SYNAPSE_CONFIG_PATH=/config/homeserver.yaml
    volumes:
      - ./synapse:/config
      - {{ setups.matrix.data_dir }}/synapse:/data
    depends_on:
      - synapse-db
    labels:
      traefik.enable: true
      traefik.http.routers.matrix.rule: Host(`{{ setups.matrix.config.synapse_domain }}`)
      traefik.http.routers.matrix.entrypoints: websecure
      traefik.http.routers.matrix.tls.certresolver: letsencrypt
      traefik.http.middlewares.matrix-headers.headers.customRequestHeaders.SSLRedirect: true
      traefik.http.middlewares.matrix-headers.headers.customRequestHeaders.SSLForceHost: true
      traefik.http.middlewares.matrix-headers.headers.customRequestHeaders.SSLHost: {{ setups.matrix.config.synapse_domain }}
      traefik.http.routers.matrix.middlewares: matrix-headers
      traefik.http.services.matrix.loadbalancer.server.port: 8008
    networks:
      - external_network
      - internal_network

  synapse-db:
    image: docker.io/postgres:12-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: synapse
      POSTGRES_PASSWORD: "{{ setups.matrix.config.postgres_password }}"
      POSTGRES_DB: synapse
      # ensure the database gets created correctly
      # https://github.com/matrix-org/synapse/blob/master/docs/postgres.md#set-up-database
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - {{ setups.matrix.data_dir }}/postgres:/var/lib/postgresql/data
    networks:
      - internal_network

  # dendrite-monolith:
  #   image: matrixdotorg/dendrite-monolith:v0.3.9
  #   restart: unless-stopped
  #   volumes:
  #     - ./dendrite:/etc/dendrite
  #     - {{ setups.matrix.data_dir }}/dendrite-media:/var/dendrite/media
  #   depends_on:
  #     - dendrite-db
  #   expose:
  #     - 8008
  #   networks:
  #     - external_network
  #     - internal_network
  #   labels:
  #     traefik.enable: true
  #     traefik.http.routers.matrix.rule: Host(`{{ setups.matrix.config.synapse_domain }}`)
  #     traefik.http.routers.matrix.entrypoints: websecure
  #     traefik.http.routers.matrix.tls.certresolver: letsencrypt
  #     traefik.http.middlewares.matrix-headers.headers.customRequestHeaders.SSLRedirect: true
  #     traefik.http.middlewares.matrix-headers.headers.customRequestHeaders.SSLForceHost: true
  #     traefik.http.middlewares.matrix-headers.headers.customRequestHeaders.SSLHost: {{ setups.matrix.config.synapse_domain }}
  #     traefik.http.routers.matrix.middlewares: matrix-headers
  #     traefik.http.services.matrix.loadbalancer.server.port: 8008

  # dendrite-db:
  #   image: postgres:11-alpine
  #   restart: unless-stopped
  #   volumes:
  #     - ./dendrite/dendrite-create-db.sh:/docker-entrypoint-initdb.d/20-create_db.sh
  #     - {{ setups.matrix.data_dir }}/dendrite-db:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_USER: dendrite
  #     POSTGRES_PASSWORD: "{{ setups.matrix.config.postgres_password }}"
  #   networks:
  #     - internal_network

  element-app:
    image: vectorim/element-web:v1.7.21
    restart: unless-stopped
    volumes:
      - ./element-config.json:/app/config.json
    labels:
      traefik.enable: true
      traefik.http.routers.element.rule: Host(`{{ setups.matrix.config.client_domain }}`)
      traefik.http.routers.element.entrypoints: websecure
      traefik.http.routers.element.tls.certresolver: letsencrypt
      traefik.http.middlewares.element-headers.headers.customRequestHeaders.SSLRedirect: true
      traefik.http.middlewares.element-headers.headers.customRequestHeaders.SSLForceHost: true
      traefik.http.middlewares.element-headers.headers.customRequestHeaders.SSLHost: {{ setups.matrix.config.client_domain }}
      traefik.http.routers.element.middlewares: element-headers
    networks:
      - external_network
      - internal_network

# add_header X-Frame-Options SAMEORIGIN;
# add_header X-Content-Type-Options nosniff;
# add_header X-XSS-Protection "1; mode=block";
# add_header Content-Security-Policy "frame-ancestors 'none'";